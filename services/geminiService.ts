
import { GoogleGenAI, Modality, Type } from "@google/genai";
import { AspectRatio, FilterState } from '../types';

const getAiClient = () => {
    const apiKey = process.env.API_KEY;
    if (!apiKey) {
        throw new Error("API_KEY environment variable not set.");
    }
    return new GoogleGenAI({ apiKey });
}

const base64ToGenerativePart = (base64Data: string, mimeType: string) => {
    return {
        inlineData: {
            data: base64Data.split(',')[1],
            mimeType
        }
    };
};

export const getOptimalFilters = async (base64Image: string, mimeType: string): Promise<Partial<FilterState>> => {
    try {
        const ai = getAiClient();
        const imagePart = base64ToGenerativePart(base64Image, mimeType);

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: {
                parts: [
                    imagePart,
                    { text: "Analizza questa immagine e determina le regolazioni ottimali per luminosità, contrasto e saturazione per migliorarne la qualità. Fornisci i valori come percentuali, dove 100 non rappresenta alcuna modifica e i valori possono variare da 0 a 200. Restituisci il risultato come un oggetto JSON." },
                ],
            },
            config: {
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        brightness: {
                            type: Type.NUMBER,
                            description: 'Valore di luminosità ottimale (da 0 a 200). 100 è l\'originale.',
                        },
                        contrast: {
                            type: Type.NUMBER,
                            description: 'Valore di contrasto ottimale (da 0 a 200). 100 è l\'originale.',
                        },
                        saturate: {
                            type: Type.NUMBER,
                            description: 'Valore di saturazione ottimale (da 0 a 200). 100 è l\'originale.',
                        },
                    },
                    required: ["brightness", "contrast", "saturate"]
                },
            },
        });
        
        const jsonText = response.text.trim();
        const parsedJson = JSON.parse(jsonText);
        
        if (typeof parsedJson.brightness !== 'number' || typeof parsedJson.contrast !== 'number' || typeof parsedJson.saturate !== 'number') {
             throw new Error("L'API ha restituito dati non validi.");
        }

        return parsedJson;

    } catch (error) {
        console.error("Errore nel migliorare l'immagine con Gemini:", error);
        throw new Error("Impossibile migliorare l'immagine. Controlla la console per i dettagli.");
    }
};


export const editImageWithGemini = async (base64Image: string, mimeType: string, prompt: string): Promise<string> => {
    try {
        const ai = getAiClient();
        const imagePart = base64ToGenerativePart(base64Image, mimeType);
        
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image',
            contents: {
                parts: [
                    imagePart,
                    { text: prompt },
                ],
            },
            config: {
                responseModalities: [Modality.IMAGE],
            },
        });
        
        const candidate = response.candidates?.[0];
        if (candidate?.content?.parts) {
            for (const part of candidate.content.parts) {
                if (part.inlineData) {
                    return `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
                }
            }
        }
        
        throw new Error("No image was returned from the API.");
    } catch (error) {
        console.error("Error editing image with Gemini:", error);
        throw new Error("Failed to edit image. Please check the console for details.");
    }
};

export const generateImageWithImagen = async (prompt: string, aspectRatio: AspectRatio): Promise<string> => {
    try {
        const ai = getAiClient();
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: aspectRatio,
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            const base64ImageBytes = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        }
        throw new Error("No image was generated by the API.");
    } catch (error) {
        console.error("Error generating image with Imagen:", error);
        throw new Error("Failed to generate image. Please check the console for details.");
    }
};
